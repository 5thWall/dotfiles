" Plugins yo!
set nocompatible
let mapleader = "\<Space>"
nnoremap <Space> <Nop>

" PLUGINS FOR THE PLUGIN GOD
call plug#begin("~/.vim/plug")
" Look and feel plugins
Plug 'altercation/vim-colors-solarized'
Plug 'itchyny/lightline.vim'
" Plug 'vim-airline/vim-airline'
" Plug 'vim-airline/vim-airline-themes'

" Language Specific Plugins
" Ruby!
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-bundler'

" Elixir!
Plug 'elixir-lang/vim-elixir'
Plug 'mattreduce/vim-mix'

" Elm!
" Plug 'lambdatoast/elm.vim'
Plug 'ElmCast/elm-vim'

" Markdown
Plug 'tpope/vim-markdown'

" Json
Plug 'elzr/vim-json'

" Convenience Plugins
" Formatting
Plug 'godlygeek/tabular'
Plug 'dhruvasagar/vim-table-mode'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'ntpeters/vim-better-whitespace'
Plug 'tpope/vim-abolish'

" Navigating
Plug 'unblevable/quick-scope'
Plug 'tpope/vim-unimpaired'
Plug 'scrooloose/nerdtree'
Plug 'majutsushi/tagbar'

" Project Management
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-projectionist'
Plug 'vimwiki/vimwiki'

" Serch
Plug 'rking/ag.vim'
Plug 'kien/ctrlp.vim'

" Documentation
Plug 'rizzatti/funcoo.vim' | Plug 'rizzatti/dash.vim'

" Syntax and testing
Plug 'janko-m/vim-test'
Plug 'w0rp/ale'
" Plug 'scrooloose/syntastic'
"Plug 'benekastah/neomake'

" Fun
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
call plug#end()

"" matchit
runtime macros/matchit.vim

" Look and Feel
syntax on
set background=dark
set cursorline
set cursorcolumn
colorscheme solarized
let g:solarized_hitrail=1
let g:lightline = {
    \ 'colorshceme': 'solarized',
    \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
    \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" }
    \ }
let g:limelight_conceal_ctermfg = 245
let g:limelight_conceal_guifg = '#586e75'
set incsearch
set hlsearch
set scrolloff=3
set linebreak
nnoremap <CR> :nohlsearch<CR>
filetype plugin indent on

" Highlight greek semicolon (Í¾) as error. This is gonna save me one day.
au Syntax * syn match Error /\%u37e/

if has('gui_macvim')
  set macligatures
  set guifont=Fira\ Code:h14
endif

" Line numbers
set number
if v:version >= 704
  set relativenumber
  nnoremap <C-n> :set rnu!<CR>
end

" keep the status line up
set laststatus=2

" Undo
set undodir=$HOME/.vim/undo
set undofile
set undolevels=1000
set undoreload=10000

" longer history
set history=200

" Project Specific .vimrc
set exrc
set secure

" Indentation
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set autoindent

" Annoyance
nnoremap Q <nop>
nnoremap <up> gk
nnoremap <down> gj
set backspace=indent,eol,start
cmap w!! %!sudo tee > /dev/null %

" Reread files that have been changed externally
set autoread

" Make ex-mode tab completion work like zsh
set wildmenu
set wildmode=full

" Set par
if executable('par')
  set formatprg=par
end

" Whitespace Cleanup
function! TrimWhiteSpace()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfunction

function! Cleanup()
  let save_cursor = getpos(".")
  let old_query   = getreg('/')

  :retab
  :normal gg=G
  :%s/\s\+$//e
  :%s/\n\{3,}/\r\r/e

  call setpos('.', save_cursor)
  call setreg('/', old_query)
endfunction

nnoremap <leader>tws :silent call TrimWhiteSpace()<CR>
noremap <leader>cu :silent call Cleanup()<CR>

if !has('win32') && match(system('uname'), 'Darwin') == 0
  nmap <silent> <Leader>d <Plug>DashSearch
  nmap <silent> <Leader>dg <Plug>DashGlobalSearch

  autocmd FileType markdown,mkd nnoremap <Leader>P :silent !open -a Marked.app '%:p'<CR><C-l>
endif

autocmd FileType ruby,javascript,haml,erb,elixir,eex,elm autocmd BufWritePre <buffer> :call TrimWhiteSpace()
autocmd FileType markdown,mkd,wiki set spell
autocmd FileType markdown,mkd,wiki set formatprg=par

" Indent all the html tags
let g:html_indent_inctags = "body,head,tbody,p"

"""""""""""""""
" PLUGIN CONFIG
"""""""""""""""

" TAGBAR CONFIG
let g:tagbar_type_elixir = {
      \ 'ctagstype' : 'elixir',
      \ 'kinds' : [
      \ 'f:functions (public)',
      \ 'g:functions (private)',
      \ 'c:callbacks',
      \ 'd:delegates',
      \ 'e:exceptions',
      \ 'i:implementations',
      \ 'a:macros',
      \ 'o:operators',
      \ 'm:modules',
      \ 'p:protocols',
      \ 'r:records',
      \ 't:types',
      \ 'z:foo'
      \ ]
      \ }
" END TAGBAR CONFIG

" Syntastic config
let syntastic_mode_map = { 'passive_filetypes': ['html', 'cucumber'] }
" END Syntastic config

" Quickscope config
" Only show quick-scope highlights after f/F/t/T is pressed
function! Quick_scope_selective(movement)
  let needs_disabling = 0
  if !g:qs_enable
    QuickScopeToggle
    redraw
    let needs_disabling = 1
  endif

  let letter = nr2char(getchar())

  if needs_disabling
    QuickScopeToggle
  endif

  return a:movement . letter
endfunction

let g:qs_enable = 0

for i in  [ 'f', 'F', 't', 'T' ]
  execute 'noremap <expr> <silent>' .  i . " Quick_scope_selective('".  i . "')"
endfor
" End Quickscope config

" Goyo
function s:goyo_enter()
  set scrolloff=999
  set cursorcolumn!
endfunction

function s:goyo_leave()
  set scrolloff=3
  set cursorcolumn
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()
" End Goyo config

" Vimwiki Config
map <Leader>tl <Plug>VimwikiToggleListItem
" End Vimwiki Config

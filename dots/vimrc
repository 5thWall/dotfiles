scriptencoding utf-8

" Set regexpengine for performance in ruby files
set regexpengine=1

let g:mapleader = "\<Space>"
nnoremap <Space> <Nop>

" PLUGINS FOR THE PLUGIN GOD
call plug#begin('~/.vim/plug')
" Look and feel plugins
Plug 'altercation/vim-colors-solarized'
Plug 'itchyny/lightline.vim'
Plug 'yggdroot/indentLine'

" Language Specific Plugins
" Ruby
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-bundler'

" Rust
Plug 'rust-lang/rust.vim'

" Elixir
Plug 'elixir-lang/vim-elixir'
Plug 'mattreduce/vim-mix'

" Elm
Plug 'ElmCast/elm-vim'

" Markdown
Plug 'tpope/vim-markdown'

" JSON
Plug 'elzr/vim-json'

" Scala
Plug 'derekwyatt/vim-scala'

" TOML
Plug 'cespare/vim-toml'

" PlantUML
Plug 'aklt/plantuml-syntax'

" Convenience Plugins
" Formatting
Plug 'godlygeek/tabular'
Plug 'dhruvasagar/vim-table-mode'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'ntpeters/vim-better-whitespace'
Plug 'tpope/vim-abolish'
Plug 'editorconfig/editorconfig-vim'

" Navigating
Plug 'unblevable/quick-scope'
Plug 'tpope/vim-unimpaired'
Plug 'scrooloose/nerdtree'

" Project Management
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-projectionist'
Plug 'vimwiki/vimwiki'

" Serch
Plug 'rking/ag.vim'
Plug 'kien/ctrlp.vim'

" Documentation
Plug 'rizzatti/funcoo.vim' | Plug 'rizzatti/dash.vim'

" Syntax and testing
Plug 'janko-m/vim-test'
Plug 'w0rp/ale'
Plug 'maximbaz/lightline-ale'

" Fun
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
call plug#end()

"" matchit
runtime macros/matchit.vim

" Look and Feel
syntax on
set background=dark
set cursorline
set cursorcolumn
colorscheme solarized
let g:solarized_hitrail=1
let g:lightline = {
    \ 'colorshceme': 'solarized',
    \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
    \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" }
    \ }
let g:lightline.component_expand = {
    \ 'linter_checking': 'lightline#ale#checking',
    \ 'linter_warnings': 'lightline#ale#warnings',
    \ 'linter_errors':   'lightline#ale#errors',
    \ 'linter_ok': 'lightline#ale#okay',
    \ }
let g:lightline.component_type = {
    \ 'linter_checking': 'left',
    \ 'linter_warnings': 'warning',
    \ 'linter_errors': 'error',
    \ 'linter_ok': 'left',
    \ }
" let g:lightline.active = { 'right': [[ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok' ]] }
let g:limelight_conceal_ctermfg = 245
let g:limelight_conceal_guifg = '#586e75'
set incsearch
set hlsearch
set scrolloff=3
set linebreak
nnoremap <CR> :nohlsearch<CR>
filetype plugin indent on

" Highlight greek semicolon (;) as error. This is gonna save me one day.
augroup saveme
  autocmd Syntax * syn match Error /\%u37e/
augroup END

if has('gui_macvim')
  set macligatures
  set guifont=Fira\ Code:h14
endif

" Line numbers
set number
if v:version >= 704
  set relativenumber
  nnoremap <C-n> :set rnu!<CR>
end

" keep the status line up
set laststatus=2

" Undo
set undodir=$HOME/.vim/undo
set undofile
set undolevels=1000
set undoreload=10000

" longer history
set history=200

" Project Specific .vimrc
set exrc
set secure

" Indentation
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set autoindent

" Annoyance
nnoremap Q <nop>
nnoremap <up> gk
nnoremap <down> gj
set backspace=indent,eol,start
cmap w!! %!sudo tee > /dev/null %

" Reread files that have been changed externally
set autoread

" Make ex-mode tab completion work like zsh
set wildmenu
set wildmode=full

" Set par
if executable('par')
  set formatprg=par\ -w120
end

" Whitespace Cleanup
function! TrimWhiteSpace()
  let l:l = line('.')
  let l:c = col('.')
  %substitute/\s\+$//e
  call cursor(l:l, l:c)
endfunction

function! Cleanup()
  let l:save_cursor = getpos('.')
  let l:old_query   = getreg('/')

  :retab
  :normal! gg=G
  :%substitute/\s\+$//e
  :%substitute/\n\{3,}/\r\r/e

  call setpos('.', l:save_cursor)
  call setreg('/', l:old_query)
endfunction

nnoremap <leader>tws :silent call TrimWhiteSpace()<CR>
noremap <leader>cu :silent call Cleanup()<CR>

if !has('win32') && match(system('uname'), 'Darwin') == 0
  nmap <silent> <Leader>d <Plug>DashSearch
  nmap <silent> <Leader>dg <Plug>DashGlobalSearch

  augroup markdown
    autocmd FileType markdown,mkd nnoremap <Leader>P :silent !open -a Marked.app '%:p'<CR><C-l>
  augroup END
endif

augroup filehelp
  autocmd FileType ruby,java,javascript,haml,erb,elixir,eex,elm autocmd BufWritePre <buffer> :call TrimWhiteSpace()
  autocmd FileType markdown,mkd,wiki set spell
  autocmd BufNewFile,BufRead *.reek set filetype=yaml
augroup END

augroup java
  autocmd FileType java set autoindent noexpandtab tabstop=4 shiftwidth=4
augroup END

" Indent all the html tags
let g:html_indent_inctags = 'body,head,tbody,p'

"""""""""""""""
" PLUGIN CONFIG
"""""""""""""""

" ale Config
let g:ale_ruby_rubocop_options = '--parallel'
" END ale Config

" IndentLine Config
let g:indentLine_char = '┊'
" END IndentLine Config

" Quickscope config
" Only show quick-scope highlights after f/F/t/T is pressed
function! Quick_scope_selective(movement)
  let l:needs_disabling = 0
  if !g:qs_enable
    QuickScopeToggle
    redraw
    let l:needs_disabling = 1
  endif

  let l:letter = nr2char(getchar())

  if l:needs_disabling
    QuickScopeToggle
  endif

  return a:movement . l:letter
endfunction

let g:qs_enable = 0

for i in  [ 'f', 'F', 't', 'T' ]
  execute 'noremap <expr> <silent>' .  i . " Quick_scope_selective('".  i . "')"
endfor
" End Quickscope config

" Scala Config
let g:scala_scaladoc_indent = 1
" End Scala Config

" Rust Config
let g:rustfmt_autosave = 1
" End Rust Config

" Goyo
function s:goyo_enter()
  set scrolloff=999
  set cursorcolumn!
endfunction

function s:goyo_leave()
  set scrolloff=3
  set cursorcolumn
endfunction

augroup goyo
  autocmd! User GoyoEnter nested call <SID>goyo_enter()
  autocmd! User GoyoLeave nested call <SID>goyo_leave()
augroup END
" End Goyo config

" Vimwiki Config
map <Leader>tl <Plug>VimwikiToggleListItem
" End Vimwiki Config
